let lookup m n image =
    let (m_max, n_max) = dims image
    -- in image!(((m - 1) `mod` m_max) + 1, ((n - 1) `mod` n_max) + 1);
    in if (m >= 1) `and` (m <= m_max) `and` (n >= 1) `and` (n <= n_max)
    then image!(m, n)
    else 0;

let matrixSum matr =
    let (m, n) = dims matr
    in foldl (+) 0 [ matr!(i, j) | (i, j) <- range (1, 1) (m, n) ];

let convolve image kernel =
    let ((m, n), (i, j)) = (dims image, dims kernel);
        (half_i, half_j) = (i `quot` 2, j `quot` 2);
        area = i * j
    in [| let interMatrix =
              [| let x = m' + i' - 1 - half_i;
                     y = n' + j' - 1 - half_j in
                lookup x y image * kernel!(i', j')
              | (i', j') in (i, j) |]
          in matrixSum interMatrix `quot` area
          | (m', n') in (m, n) |]
in
convolve inputImage filter
